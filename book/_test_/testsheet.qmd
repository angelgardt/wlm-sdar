# Отладка листка

{{< include ../other/_symbols.qmd >}}

```{r opts, echo=FALSE}
knitr::opts_chunk$set(echo = FALSE, eval=FALSE)
```

```{=html}
<!--
REPLACE ALL pr1 TO pr<n> WITH MATCH CASE
-->
```





## 1 {#pr1-1}

<div class="level" id="lvl-q1"></div>

::: {#pr1-1-task .task}
Вычислите:

a. $-14^7 - 6 \times 2^{11}$
b. $\sin^2 64$
c. $e^{8 + \pi}$
d. $\log_{12} 34$
e. $\sqrt{5\!+\!2i}$

:::

::: hints-wrapper
<details class="hints" id="pr1-4-hints">

<summary>Подсказка</summary>

* `?exp()`

</details>
:::



### #2 {#pr1-2}

<img id="pr1-2-level" class="level"/>

::: {#pr1-2-task .task}
Присвойте переменным `x` и `y` значения `3` и `-1.44` соответственно.

Вычислите:

a. $\log_{\sqrt[x]{24}} 17^{\sin{4.8\pi}}$
b. $\dfrac{e^{x + y^2}}{1 + e^{x+y^2}}$
c. $\sqrt{\ln \Bigg( \dfrac{\cos\Big( \dfrac{2}{3x^2} \Big)}{|y| + x} \Bigg)}$
d. $\sin \big( \dfrac{\pi}{4x} \big) + \cos \big( \dfrac{2\pi}{\sqrt{y} - 1} \big)$

:::

::: hints-wrapper
<details class="hints" id="pr1-4-hints">

<summary>Подсказки</summary>

* $\sqrt[x]{a} = a^{\frac{1}{x}}$
* `?log()`

</details>
:::


### #3 {#pr1-3}

<img id="pr1-3-level" class="level"/>

::: {#pr1-3-task .task}
Создайте следующие векторы:

a. $\pmatrix{4 & 8 & 12}$

```{r 3a}
c(4, 8, 12)
```

b. $\pmatrix{1 & 2 & 3 & \dots & 9 & 10}$

```{r 3b}
1:10

```
c. $\pmatrix{10 & 9 & 8 & \dots & 2 & 1 & 0 & -1 & -2 & \dots & -9 & -10}$

```{r 3c}
10:-10

```
d. $\pmatrix{1 & 2 & 3 & \dots & 9 & 10 & 9 & \dots  & 3 & 2 & 1}$

```{r 3d}
c(1:10, 9:1)
```

:::


::: hints-wrapper
<details class="hints" id="pr1-3-hints">

<summary>Подсказка</summary>

`` ?`:` ``

</details>
:::



### #4 {#pr1-4}

<img id="pr1-4-level" class="level"/>

::: {#pr1-4-task .task}
Создайте следующие векторы:

a. $\pmatrix{2 & 4 & 8 & 10 & 12 & \dots & 26 & 28 & 30}$

```{r 4a}
seq(2, 30, by = 2)
```

b. $\pmatrix{0 & 0.5 & 1 & 1.5 & 2 \dots & 8.5 & 9 & 9.5 & 10}$

```{r 4b}
seq(0, 10, by = .5)
```

c. $\pmatrix{-3 & -2.75 & -2.5 & -2.25 & \dots & 2.25 & 2.5 & 2.75 & 3}$

```{r 4c}
seq(-3, 3, by = .25)
```

:::

::: hints-wrapper
<details class="hints" id="pr1-4-hints">

<summary>Подсказка</summary>

`` ?seq() ``

</details>
:::



### #5 {#pr1-5}

<img id="pr1-5-level" class="level"/>

::: {#pr1-5-task .task}
Возьмите вектор (a) из [задания 3](#pr1-3) и на основе него создайте следующие векторы:

a. $\pmatrix{4 & 8 & 12 & 4 & 8 & 12 & \dots & 4 & 8 & 12}$, где $4$ повторяется 8 раз

```{r 5a}
rep(c(4, 8, 12), times = 8)
```

b. $\pmatrix{4 & 8 & 12 & 4 & 8 & 12 & \dots & 4 & 8 & 12 & 8 & 12}$, где $4$ повторяется 8 раз, а $8$ и $12$ повторяются по 9 раз

```{r 5b}
c(rep(c(4, 8, 12), times = 8), 8, 12)
```

c. $\pmatrix{4 & 4 & \dots & 4 & 8 & 8 & \dots & 8 & 12 & 12 & \dots & 12}$, где $4$ повторяется 10 раз, $8$ --- 20 раз, а $12$ --- 30 раз.

```{r 5c}
rep(c(4, 8, 12), times = c(10, 20, 30))
```

:::

::: hints-wrapper
<details class="hints" id="pr1-5-hints">

<summary>Подсказка</summary>

`` ?rep() ``
</details>
:::



### #6 {#pr1-6}

<img id="pr1-6-level" class="level"/>

::: {#pr1-6-task .task}
Пусть вектор (а) из [предыдущего задания](#pr1-5) --- это количество стимулов в пробах эксперимента. Сохраните его в переменную `setsize` и приведите к текстовому типу данных, чтобы он корректно интерпретировался статистическими функциями.
:::

```{r 6}
setsize <- rep(c(4, 8, 12), times = 8)
as.character(setsize)
```

::: hints-wrapper
<details class="hints" id="pr1-6-hints">

<summary>Подсказка</summary>

`` ?character() ``
</details>
:::



### #7 {#pr1-7}

<img id="pr1-7-level" class="level"/>

::: {#pr1-7-task .task}

a. Пусть в нашем исследовании есть три группы респондентов --- `group 1`, `group 2` и `group 3`. Создайте вектор из 90 значений (по 30 для каждой группы), который будет описывать принадлежность респондентов к какой-либо группе.

Возможны два варинта результата:

* так

```{r, echo=FALSE}
paste("group", rep(1:3, each = 30))
```

* или так

```{r, echo=FALSE}
paste("group", rep(1:3, times = 30))
```

b. Пробелы в переменной --- это не очень хорошо. С ними порой бывает трудно совладать, особенно если это название переменной. Поправьте код так, чтобы значения получившегося вектора были `group1`, `group2` и `group3`.

:::



::: hints-wrapper
<details class="hints" id="pr1-7-hints">

<summary>Подсказка</summary>

Есть полезные функци

```paste()``` и ```paste0()```

</details>

</details>
:::



### #8 {#pr1-8}

<img id="pr1-8-level" class="level"/>

::: {#pr1-8-task .task}

С помощью функции `rnorm()` сгенерируйте генеральную совокупность из 100 000 объектов с параметрами `mean = 4` и `sd = 5`. Сохраните результат генерации в переменную `pop`.

:::

::: {.callout-note}
#### Управляем случайностью

Мы начали использовать функции, которые генерируют случайные значения. На самом деле --- псевдослучайные. Эти функции все равно берут для старта генерации некоторое число, которые называется **зерно датчика случайных чисел**. При каждой генерации выбирается новое зерно, поэтому чтобы получать вопроизводимые генерации, используйте команду

```{r set-seed, echo=TRUE}
set.seed(123) # аргументом может быть любое число
```

для фиксации зерна датчика.
:::

Здесь для примера выведены первые 6 значений получившегося вектора с зерном датчика `123`:

```{r 8}
pop <- rnorm(10^5, mean = 4, sd = 5)
head(pop)
```

### #9 {#pr1-9}

<img id="pr1-9-level" class="level"/>

::: {#pr1-9-task .task}

Извлеките из полученной генеральной совокупности 5 случайных выборок по 100 наблюдений. Сохраните результаты в переменные `sam1`, `sam2`, `sam3`, `sam4`, `sam5`.

:::

```{r 9}
sam1 <- sample(pop, 100)
sam2 <- sample(pop, 100)
sam3 <- sample(pop, 100)
sam4 <- sample(pop, 100)
sam5 <- sample(pop, 100)
```


::: hints-wrapper
<details class="hints" id="pr1-9-hints">

<summary>Подсказки</summary>

```sample()```

</details>
:::

### #10 {#pr1-10}

<img id="pr1-10-level" class="level"/>

::: {#pr1-10-task .task}

a. Вычислите сумму по вектору `sam1`.

```{r 10a}
sum(sam1)
```

b. Вычислите среднее по вектору `sam2`.

```{r 10b}
mean(sam2)
```

c. Вычислите медиану по вектору `sam3`.

```{r 10c}
median(sam3)
```

:::

::: hints-wrapper
<details class="hints" id="pr1-9-hints">

<summary>Подсказки</summary>

`sum()`, `mean()`, `median()`

</details>
:::


### #11 {#pr1-11}

<img id="pr1-11-level" class="level"/>

::: {#pr1-11-task .task}
Вытащите из вектора `sam4`

a. первое значение

```{r 11a}
sam4[1]
```

b. последнее значение

```{r 11b}
sam4[length(sam4)]
```

c. значения с 20 по 45

```{r 11c}
sam4[20:45]
```

d. все значения на каждой третьей позиции

```{r 11d}
sam4[seq(3, length(sam4), by = 3)]
```

:::



### #12 {#pr1-12}

<img id="pr1-12-level" class="level"/>

::: {#pr1-12-task .task}
a. Отберите из вектора `sam1` отрицательные значения.

```{r 12a}
sam1[sam1 < 0]
```

b. Сколько отрицательных значений получилось?

```{r 12b}
length(sam1[sam1 < 0])
```

c. Сколько в векторе `sam2` значений, которые больше среднего по этому вектору?

```{r 12c}
sum(sam2 > mean(sam2))
```

:::

::: hints-wrapper
<details class="hints" id="pr1-12-hints">

<summary>Подсказки</summary>

* Как проверить, является ли значение отрицательным?
* Что будет, если применить функцию `sum()` к логическому вектору?

</details>
:::

### #13 {#pr1-13}

<img id="pr1-13-level" class="level"/>

::: {#pr1-13-task .task}
a. Отберите из вектора `sam3` значения, которые больше $3$ и меньше $8$.

```{r 13a}
sam3[sam3 > 3 & sam3 < 8]
```

b. Отберите из вектора `sam3` значения, которые меньше $0.5$ и больше $9.3$.

```{r 13b}
sam3[sam3 < .5 | sam3 > 9.3]
```

:::

::: hints-wrapper
<details class="hints" id="pr1-13-hints">

<summary>Подсказки</summary>

Choose your fighter: `&` or `|`!

</details>
:::

### #14 {#pr1-14}

<img id="pr1-14-level" class="level"/>

::: {#pr1-14-task .task}

a. Какое максимальное значение по вектору `sam1`?

```{r 14a}
max(sam1)
```

b. Какое минимальное значение по вектору `sam1`?

```{r 14b}
min(sam1)
```

:::

::: hints-wrapper
<details class="hints" id="pr1-14-hints">

<summary>Подсказки</summary>

`max()`
`min()`

</details>
:::

### #15 {#pr1-15}

<img id="pr1-15-level" class="level"/>

::: {#pr1-15-task .task}

a. На каком месте в векторе `sam1` стоит его максимальное значение?

```{r}
which.max(sam1)
```

b. На каком месте в векторе `sam1` стоит его минимальное значение?

```{r}
which.min(sam1)
```

:::

::: hints-wrapper
<details class="hints" id="pr1-15-hints">

<summary>Подсказки</summary>

`?which`

</details>
:::

### #16 {#pr1-16}

<img id="pr1-16-level" class="level"/>

::: {#pr1-16-task .task}

Выполните следующую команду:

```{r add-na, echo=TRUE}
set.seed(5); sam5[sample(1:100, sample(100, 1))] <- NA
```

Она добавит несколько пропущенных значений в вектор `sam5`, чтобы бы познакомились с ними поближе.

a. Сколько пропущенных значений получилос в векторе `sam5`?

```{r 16a}
sum(is.na(sam5))
```

b. На каких местах они стоят?

```{r 16b}
which(is.na(sam5))
```

:::

::: hints-wrapper
<details class="hints" id="pr1-16-hints">

<summary>Подсказки</summary>

`is.na()`, `sum()`, `which()`

</details>
:::

### #17 {#pr1-17}

<img id="pr1-17-level" class="level"/>

::: {#pr1-17-task .task}
Нам надо разделить выборку на две части. Отберите каждое второе значение из вектора `sam2`.

::: {.callout-warning}
Сделайте это без использования функции `seq()`.
:::

```{r 17}
sam2[c(FALSE, TRUE)]
```
:::

::: hints-wrapper
<details class="hints" id="pr1-17-hints">

<summary>Подсказки</summary>

`c(FALSE, TRUE)`

</details>
:::

### #18 {#pr1-18}

<img id="pr1-18-level" class="level"/>

::: {#pr1-18-task .task}
Мы хотим трансформировать наши переменные для последующего анализа:

a. умножьте каждое значение вектора `sam1` на $20$

```{r 18a, eval=FALSE}
sam1 * 20
```

b. вычтите из каждого значения вектора `sam2` среднее по этому вектору

```{r 18b, eval=FALSE}
sam2 - mean(sam2)
```


c. прологорифмируйте все значения вектора `sam3` (используйте десятичный логарифм)

```{r 18c, eval=FALSE}
log10(sam3)
```

:::

::: hints-wrapper
<details class="hints" id="pr1-18-hints">

<summary>Подсказки</summary>

`log10()`

</details>
:::

### #19 {#pr1-19}

<img id="pr1-19-level" class="level"/>

::: {#pr1-19-task .task}
Выполните преобразования из предыдущего задания на векторе `sam5`.

```{r 19, eval=FALSE}
sam5 * 20
sam5 - mean(sam5)
log10(sam5)
```

Возникли ли проблемы? Можно ли их поправить?

:::

::: hints-wrapper
<details class="hints" id="pr1-19-hints">

<summary>Подсказки</summary>

`mean(x, na.rm = TRUE)`

</details>
:::

### #20 {#pr1-20}

<img id="pr1-20-level" class="level"/>

::: {#pr1-20-task .task}
Выполните две операции:

a. `1:2 + 1:10`
b. `1:3 + 1:10`

Что получается? Почему так?

```{r 20, eval=FALSE}
1:2 + 1:10
1:3 + 1:10
```
:::

::: hints-wrapper
<details class="hints" id="pr1-20-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::


### #21 {#pr1-21}

<img id="pr1-21-level" class="level"/>

::: {#pr1-21-task .task}
Выберите из вектора `sam1` все значения, кроме:

a. первого

```{r 21a}
sam1[-1]
```

b. последнего

```{r 21b}
sam1[-length(sam1)]
```

c. каждого пятого

```{r 21c}
sam1[-seq(5, length(sam1), by = 5)]
```

:::



### #22 {#pr1-22}

<img id="pr1-22-level" class="level"/>

::: {#pr1-22-task .task}
Удалите из вектора `sam5` пропущенные значения, а затем выбрите из оставшихся те, которые по абсолютному значению не превосходят среднего по исходному вектору.

```{r 22}
sam5[!is.na(sam5) & abs(sam5) <= mean(sam5, na.rm = TRUE)]
```

:::


### #23 {#pr1-23}

<img id="pr1-23-level" class="level"/>

::: {#pr1-23-task .task}
Создайте вектор абсолютных отклонений от среднего для переменной `sam3`.

Отклонение --- это разность между средним значением и конкретным наблюдением.

```{r 23}
abs(sam3 - mean(sam3))
```

:::


### #24 {#pr1-24}

<img id="pr1-24-level" class="level"/>

::: {#pr1-24-task .task}

Представим себя ненадолго исследователями эмоций. Сгенерируем переменную, описывающую условия в нашем эксперименте --- случайный вектор из 120 элементов, значения которых могут быть `positive`, `negative` или `control`.

a. Сохраните результаты генрации в переменную `cond`.

Для примеры выведены 10 первых значений вектора, сгенерированного при `set.seed(616)`.

```{r 24a}
set.seed(616)
cond <- sample(c("positive", "negative", "control"), 120, replace = TRUE)
head(cond, 10)
```

b. Поскольку данная переменная является группирующей, то есть задает группы наблюдений, давайте превратим её из текстовой в факторную.

```{r 24b}
cond <- as.factor(cond)
cond
```

:::


### #25 {#pr1-25}

<img id="pr1-25-level" class="level"/>

::: {#pr1-25-task .task}
Значения созданной переменной, несмотря на категориальный характер, можно упорядочить. Например, `negative < control < positive`. Такой порядок отличается от алфавитного.

Создайте упорядоченный фактор, в котором порядок категорий будет соответствовать приведенному (`negative < control < positive`).

```{r 25}
cond <- factor(cond, ordered = TRUE, levels = c("negative", "control", "positive"))
cond
```

:::

::: hints-wrapper
<details class="hints" id="pr1-25-hints">

<summary>Подсказка</summary>

`?factor()`

</details>
:::

### #26 {#pr1-26}

<img id="pr1-26-level" class="level"/>

::: {#pr1-26-task .task}

Постройте частотную таблицу по вектору `cond`, чтобы оценить уравнивание условий в исследовании.

```{r 26}
table(cond)
```

:::

::: hints-wrapper
<details class="hints" id="pr1-26-hints">

<summary>Подсказка</summary>

`?table()`

</details>
:::

### #27 {#pr1-27}

<img id="pr1-27-level" class="level"/>

::: {#pr1-27-task .task}

Выполните следующие команды для создания двух векторов `x1` и `x2`.

```{r 27-data}
x1 <- sample(-100:100, 26); x2 <- sample(0:1, 26, replace = TRUE, prob = c(1, 3))
data.frame(x1 = x1, x2 = x2) |> write.csv("../data/pr1-27.csv")
```

```{r 27, echo=TRUE}
x1 <- read.csv("https://raw.githubusercontent.com/angelgardt/wlm2023/master/data/pr1-27.csv")$x1
x2 <- read.csv("https://raw.githubusercontent.com/angelgardt/wlm2023/master/data/pr1-27.csv")$x2
```

Вычислите результат выражения `x1 / x2`.

Что получилось? Почему так?

:::



### #28 {#pr1-28}

<img id="pr1-28-level" class="level"/>

::: {#pr1-28-task .task}

Возьмите вектор от $1$ до $30$ с шагом $1$ и отберите из него все числа, кроме тех, которые одновременно кратны двум и трем.

```{r 28}
(1:30)[((1:30) %% 2 & (1:30) %% 3)]
```

:::

::: hints-wrapper
<details class="hints" id="pr1-28-hints">

<summary>Подсказки</summary>

* Логические операторы приводят числовые значения к логическому типу
* `` ?`!` ``


</details>
:::

### #29 {#pr1-29}

<img id="pr1-29-level" class="level"/>

::: {#pr1-29-task .task}
Возьмите всё тот же вектор от $1$ до $30$ с шагом $1$ и преобразуйте его по следующей схеме:

$$
\matrix{
x_1 & \rightarrow & x_1 \\
x_2 & \rightarrow & \sqrt{x_2} \\
x_3  & \rightarrow & \sqrt[3]{x_3} \\
x_4  & \rightarrow & x_4 \\
x_5 & \rightarrow & \sqrt{x_5} \\
... & &
}
$$

```{r 29}
(1:30)^c(1, .5, 1/3)
```

:::

::: hints-wrapper
<details class="hints" id="pr1-29-hints">

<summary>Подсказки</summary>

* $\sqrt[x]{a} = a^{\frac{1}{x}}$
* Операция возведения в степень, как и другие, тоже может зацикливать вектор.

</details>
:::

### #30 {#pr1-30}

<img id="pr1-30-level" class="level"/>

::: {#pr1-30-task .task}
И напоследок. Мы можем умножать векторы на число и умножать их друг на друга поэлементно. Однако в линале под перемножением вектором понимается их скалярное произведение.

Найдите скалярное произведение векторов `sam1` и `sam2`.

```{r 30}
sam1 %*% sam2
```

:::

::: hints-wrapper
<details class="hints" id="pr1-30-hints">

<summary>Подсказка</summary>

```%*%```

</details>
:::

***

Некоторые задания, а также форматы заданий, подсмотрены у @moroz-dh4dl и @grinberg-rexercises.

***

```{=html}
<!--- CHANGE pr1 TO pr<n> IN THE LINES BELOW--->
<!-- <script type="text/javascript" src="./js/pr1.json"></script> -->
<!-- <script type="text/javascript" src="./js/pr.js"></script> -->
```
