# Знакомство с R {#r-intro}

```{r opts, echo=FALSE, eval=TRUE}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, warning = FALSE, message = FALSE, error = FALSE)
```

```{r pkgs, echo=FALSE}
library(tidyverse)
theme_set(theme_bw())
library(rvest)
```

:::{.intro}
В этой главе мы познакомимся с самыми основами работы в R и начнем прям от Адама --- с установки и интерфейса. Если вы уже видели R и RStudio и хотите сразу стартовать с работы в среде, прыгайте [сюда](#r-intro-console).
:::




## Сверхкраткая история R {#r-intro-history}

:::{.lab-junior}
:::

R придумали Росс Ихака ([Ross Ihaka](https://en.wikipedia.org/wiki/Ross_Ihaka)) и Роберт Джентльмен ([Robert Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician))) в 1992 году в Департаменте статистики Университета Окленда ([Department of Statistics at Auckland](https://www.auckland.ac.nz/en/science/about-the-faculty/department-of-statistics.html), @fig-rbirthplace). Изначальная цель --- разработать язык, чтобы преподавать вводный курс статистики. За основу был взят язык S, разработанный [Bell Laboratories](https://en.wikipedia.org/wiki/Bell_Labs), и в 1994 году была завершена первая версия [@ross2022].

```{r map-rbirthplace, echo=FALSE}
#| code-fold: true
#| label: fig-rbirthplace
#| fig-cap: "Тут родился R"

library(leaflet)
leaflet() %>%
  addTiles() %>% 
  # addProviderTiles(providers$Stadia.AlidadeSmooth) %>% 
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```

Через пару лет разработчики перестали справляться с [электронными] письмами о багах и предлагаемых улучшениях, и в 1997 году R становится частью [GNU Project](https://www.gnu.org/gnu/gnu.html) [@ross2022, p. 17]. В этом же году K. Hornik и F. Leisch создают на базе Венского технического университета (Technische Universität Wien) репозиторий [CRAN](https://cran.rstudio.com/) (The Comprehensive R Archive Network) для совместной работы «ядерной» группы разработчиков (core team). В феврале 2000 года выходит первая стабильная версия языка.

Сегодня R развивается международной командой исследователей вычислительной статистистики ([R Project](https://www.r-project.org/)) и поддерживается некоммерческой организацией [R Foundation](https://www.r-project.org/foundation/).

:::{.callout-note}
###### Почему R так называется?

Это шутка авторов. «R» обозначает первую букву их имён (**R**obert и **R**oss) [@ross2022, p.12].
:::




## Обзор R {#rintro-overview}

R является свободным программным обеспечением, распространяемым по лицензии [GNU General Public License](https://www.r-project.org/COPYING). Создававшийся изначально как язык для статистических вычислений, он впоследствии существенно расширил свои возможности, и теперь его можно считать полноценным языком программирования[^r-not-proglang]. Хотя R и не является языком программирования общего назначения[^appendix-proglang-classifications] (general-purpose programming language), на нём можно:

* предобрабатывать и анализировать данные
* строить стильные и интерактивные визуализации
* создавать динамические отчеты, презентации и дашборды
* писать статьи, книги, сайты и приложения
* …

[^r-not-proglang]: Хотя относительного этого утверждения есть и другие мнения (см. [тред](https://www.reddit.com/r/learnprogramming/comments/75240o/why_is_the_r_programming_language_looked_at_with/), [пост](https://forum.posit.co/t/r-programming-not-a-real-language-pfffft/31453) и [пост](https://www.epatters.org/post/r-lang/)).

[^appendix-proglang-classifications]: Подробнее см. [приложение](appendix-proglang.qmd#proglang-classification-tasks).

Для R написано бесчисленное множество пакетов (@fig-n-pkgs), которые позволяют работать с самыми разными данными (поведенческими, опросниковыми, биологическими, лингвистическими, географическими и др.) и самыми разными статистическими методами (от t-теста до структурного моделирования). Количество доступных на CRAN пакетов экспоненциально растет с каждым годом.

```{r number-of-r-pkgs, echo=FALSE}
#| label: fig-n-pkgs
#| fig-cap: "Количество пакетов, доступное на CRAN. Столбцы отображаются пакеты, опубликованные в конкретном году, линия --- суммарное количество пакетов, опубликованное к данному году. Визуализация автора по [данным CRAN](https://cran.r-project.org/web/packages/available_packages_by_date.html)"

read_html("https://cran.r-project.org/web/packages/available_packages_by_date.html") %>%
  html_table() %>% .[[1]] %>% 
  mutate(year = str_extract(Date, "^\\d{4}")) %>% 
  summarise(n = n(),
            .by = year) %>% 
  arrange(year) %>% 
  mutate(cum_n = n + lag(n)) %>% 
  filter(year != "2008") %>% 
  ggplot(aes(x = year)) +
  geom_col(aes(y = n), fill = "royalblue") +
  geom_line(aes(y = cum_n), group = 1) +
  geom_point(aes(y = cum_n), size = 2) +
  labs(x = 'Год',
       y = "Количество")
```

R является **высокоуровневым**, **интерпретируемым**, **мультипарадигмальным**[^r-oop] языком программирования с **динамической типизацией**[^appendix-proglang-classifications-2]. У него очень простой, практически интуитивный, синтаксис, в результате чего --- низкий порог вхождения по сравнению с другими языками программирования.

[^r-oop]: Но глубоко внутри --- объектно-ориентированным.

[^appendix-proglang-classifications-2]: Подробнее в том же [приложении](appendix-proglang.qmd#proglang-classification-tasks).

R широко используется в академической среде исследователями социальных и гуманитарных наук, и, пожалуй, его можно назвать стандартом анализа данных де-факто в этих областях. Конечно, если его сравнивать со статистическими программами, предоставляющими графический интерфейс (Statistica, SPSS, JASP, Jamovi и др.), то порог вхождения тут будет выше, однако R позволяет организовать работу с данными так, чтобы она была **воспроизводима**, чем, увы, не могут похвалиться большинство программ с графическими интерфейсами.

Кроме того, реализация статистических методов в R часто требует копнуть в суть масих методов чуть глубже, чтобы корректно провести анализ, что, с одной стороны, может создать некоторые трудности, но, с другой стороны, **мотивирует лучше разобраться в метода анализа данных**, а значит, **более осознанно их использовать**.

В общем, R --- это стильно, можно и полезно.


### R vs Python {#rintro-r-vs-python}

![Великое противостояние. [Источник](https://www.freepik.com/author/jcomp)](img/r-intro/r-vs-py.jpg)

В мире дата-аналитики существует великое противостояние двух языков --- R и Python. На мой взгляд, довольно бессмысленное.

::::{.quote}
--- Я не могу решить, делать мне на R или на Python... <br>
--- Какая к черту разница! Главное --- делай! <br>

:::{.quote-sign}
Курилка на Армянском переулке около Департамента психологии НИУ ВШЭ <br>
2010-е гг.
:::

::::

Хотя этот диалог случился, можно считать, довольно давно, он, как мне кажется, не утратил своей актуальности. Python --- язык программирования общего назначения, R --- больше специализирован на анализе данных. Первый имеет более широкие возможности, второй --- удобнее для аналитики. Для тех, у кого нет опыта программирования и кому сложно даются технические области, думаю, R будет проще. На мой взгляд, в Python от аналитики отвлекает ярко выраженное ООП (объектно-ориентированное программирование), которое в R спрятано глубоко под капот. Аналитика же по своей сути --- это диалог с данными, и в R его выстроить гораздо проще. Исходя из этого мой критерий следующий: для аналитики --- R, для всего остального --- Python.

Безусловно, это крайне субъективный критерий, и далеко не всем он покажется уместным и работающим. Есть другой --- в R гораздо более интуитивно реализована работа с данными (`tidyverse` очень сильно выигрывает в интуитивности у `pandas`), как и пакеты для сложных методов анализа (психометрический анализ, SEM, смешанные линейные модели и др.).

Впрочем, если вы открыли эту книгу, предполагаю, что вы заинтересованы именно в R, поэтому позволю себе свернуть обсуждение великого противостояния, и перейти к сути.




## Установка {#r-intro-installation}

:::{.lab-junior}
:::

Мы сейчас будем устанавливать все программы…[^fokin-meme]

[^fokin-meme]: На случай, если новое поколение утратило связь с культурным прошлым, а старое поколение желает, чтобы ему подсвело олдскулы --- [источник](https://memepedia.ru/sashko-fokin/).

:::{.callout-warning}
###### Последовательность установки

Нам необходимо будет установить две вещи --- R и RStudio. Во избежании возможных ошибок необходимо их ставить именно в этом порядке: **сначала --- R, затем --- RStudio**. Иначе RStudio может не найти R на компе и будет ругаться.
:::


### Установка R {#r-intro-rinstallation}

:::{.lab-junior}
:::

Установить R можно с репозитория основного репозитория [CRAN (The Comprehensive R Archive Network)](https://cran.r-project.org/). Существуют версии R для всех трёх наиболее распространенных десктопных операционных систем:

* для [Win](https://cran.r-project.org/bin/windows/base/)
* для [macOS](https://cran.r-project.org/bin/macosx/)
* для [Linux](https://cran.rstudio.com/bin/linux/)

В целом, установщики операционных систем обычно хорошо справляются со своей задачей, и в 90% случаев всё встаёт без багов. Однако ниже я оставлю некоторые комментарии о проблемах, с которыми сталкивался сам или о которых говорили знакомые и коллеги.


#### Win {#rintro-rinstallation-win}

:::{.lab-junior}
:::

Ниже есть пример установки R на Win (@fig-rinstallation-win), если вдруг у вас возникли какие-то проблемы при установке. Скорее всего всё прошло достаточно ровно.

Самая частая проблема --- имя пользователя на кириллице. Компьютер вообще достаточно плохо переваривает кириллические символы. Особенную же проблему составляют такие символы в путях к файлам. Поскольку на Win папка пользователя называется именем пользователя, то в случае кириллического имени, естественно, её имя будет на кириллице. Это можно пережить, перезадав некоторое дефолтные пути в настройках, однако если есть возможность переименовать пользователя и папку, я бы рекомендовал это сделать. Ну, так, чтобы не было неожиданных внезапностей.

:::{#fig-rinstallation-win}

{{< video https://youtu.be/WoffShoneY8?si=Du9xHiOVBHZaOYuE >}}

Установка R на Windows (на примере Windows 10 Pro)
:::


#### macOS {#rintro-rinstallation-mac}

:::{.lab-junior}
:::

:::{.callout-important}
###### Apple silicon vs Intel Macs

Обратите внимание на [разные версии](https://cran.r-project.org/bin/macosx/) для Apple silicon (M1) и Intel Macs.
:::

Ниже есть пример установки R на Mac (@fig-rinstallation-mac), если вдруг у вас возникли какие-то проблемы при установке.

Тут в 99.9% случаев всё ровно. Бывает, что уже в процессе работы некоторые пакеты жалуются на недоустановленное что-то или на какие-либо несовместимости, но это случается невероятно редко и обычно достаточно легко лечится.

:::{#fig-rinstallation-mac}

{{< video https://youtu.be/WoffShoneY8?si=Du9xHiOVBHZaOYuE >}}

Установка R на macOS (на примере macOS Sonoma 14.1.1)
:::


#### Linux {#rintro-rinstallation-linux}

:::{.lab-middle}
:::

:::{.callout-important}
###### Обилие дистрибутивов

Конечно, если вы работете на Linux, то прекрасно знаете о дистрибутивах и их особеностях. Однако отмечу, что на разные дистрибутивы Linux устанавливаются [разные версии](https://cran.rstudio.com/bin/linux/).
:::

:::{.callout-note}
###### Примеры на Linux

Я работаю на Ubuntu (ВЕРСИЯ), поэтому примеры для Linux будут приводится именно для этого дистрибутива. На других дистрибутивах могут быть свои особенности.
:::

Ниже есть пример установки R на Linux (Ubuntu) (@fig-rinstallation-linux), если вы только начинаете знакомство с Linux и у вас возникли какие-то проблемы при установке.

Если вы пользователь Linux, значит R вы, вероятно, ставите через Terminal. Например, с помощью такой команды:

```
sudo apt install r-base-dev
```

Скорее всего, всё пройдет хорошо, и базовый R будет работать. Проблемки могут случиться чуть дальше, когда мы будем ставить дополнительные пакеты, в которых будет идти основная наша работа --- R может не найти некоторые системные пакеты. Такая проблема возникла у меня возникла (на Ubuntu 22.04) --- помогла команда ниже:

```
sudo apt-get install -y libxml2-dev libcurl4-openssl-dev libssl-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev linfreetype6-dev libpng-dev libtiff5-dev libjpeg-deva
```

Сначала мы будем знакомиться с базовым R и работать только в нём, но имейте в виду, что тут есть некая команда, которая может пригодиться.

:::{#fig-rinstallation-linux}

{{< video https://youtu.be/WoffShoneY8?si=Du9xHiOVBHZaOYuE >}}

Установка R на Linux (на примере Ubuntu ВЕРСИЯ)
:::


### Установка RStudio {#r-intro-rstudioinstallation}

:::{.lab-junior}
:::

Казалось бы, мы поставили R, и можно было бы на этом закончить. И это, в общем-то, правда --- [можно работать и просто в R](#r-intro-rinterface). Однако для упрощения и увеличения приятности работы стоит установить RStudio[^rstudio-kek]. Установочные файлы лежат [тут](https://posit.co/download/rstudio-desktop/). На всякий случай, прикреплены примеры установки RStudio для Win, macOS и Linux (@fig-rstudioinstallation).

[^rstudio-kek]:По пути надо ещё не перепутать её с [R-Studio](https://www.r-studio.com/ru/), которая восстанавливает данные с диска. Критическое сходство названий двух программ обязывает к повышенной внимательности при написании работ/статей/отчётов/заявок на гранты, в которых вы упоминаете RStudio --- иногда рецензенты весьма недоумевают, как исследователи анализировали данные с помощью ПО для восстановления данных. Хотя это может звучать несколько странно, такой случай имел место быть в реальности…

RStudio --- это интегрированная среда разработки (IDE) (подробнее см. [тут](#rintro-ide)). Она расширяет возможности R, предоставляет более юзабельный интерфейс для взаимодействия с языком и в целом делает работу с R радостной и приятной.

RStudio это не единственная среда для работы с R, но определенно самая удобная и популярная, поэтому мы будем пользоваться именно ею. RStudio является IDE, разработанной специально для работы в R, однако это вовсе не значит, что в ней нельзя использовать другие языки программирования. Например, книжка, которуя вы сейчас читаете, написана с использованием [R](https://www.r-project.org/about.html), [Python](https://www.python.org/), [HTML](http://htmlbook.ru/html), [SASS](https://sass-lang.com/), [JavaScript](https://learn.javascript.ru/), [YAML](https://yaml.org/) и других языков --- при этом вся работа велась в RStudio. Вот такая мощная вещь.

:::{#fig-rstudioinstallation}

{{< video https://youtu.be/WoffShoneY8?si=Du9xHiOVBHZaOYuE >}}

Установка RStudio на основные операционные системы
:::


#### Что такое IDE? {#rintro-ide}

:::{.lab-junior}
:::

Интегрированная среда разработки (IDE, integrated development environment) --- это специальная программа, которое предоставляет широкий спектр возможностей для разработки программного обеспечения. Возможно, вы слышали такие слова, как [PyCharm](https://www.jetbrains.com/ru-ru/pycharm/) или [Visual Studio Code](https://code.visualstudio.com/) --- это всё варианты IDE.

Обычно IDE содержит несколько ключевых компонентов:

- текстовый редактор для написания скриптов
- [транслятор](appendix-proglang.qmd#proglang-translator) языка
- отладчик (debugger)
- средства автоматизации сборки (build automation tools)

Обычно IDE позволяют работать с несколькими языками программирования, но бывают и специализированные.

> И хотя всё ещё присутствует холивар относительного того, является ли R языком программирования, который отмечался в сносках, RStudio однозначно можно назвать полноценной IDE, так как разработка в ней вполне может вестить. Пример продукта разработки прямо перед вами --- книжка, которую вы сейчас читаете.


### Posit Cloud {#r-intro-positcloud}

:::{.lab-junior}
:::

В подавлающем большинстве случаев работа в R происходит на десктопной версии. Однако это не единственный вариант. Например, если вам нужно резко, быстро и несложно обработать небольшие данные, а вы в отпуске без своего любимого персонального компа, можно поработать в облачной версии RStudio --- [Posit Cloud](https://posit.cloud/).

В Posit Cloud используются RStudio Projects[^rstudio-projects-note], интерфейс полностью совпадает с десктопной версией RStudio, доступны дополнительные пакеты. Однако объем доступной оперативной памяти существенно ограничен, что, безусловно, может создать существенные сложности. Тем не менее, такой вариант работы вполне можно рассмотреть в каких-то ограниченных условиях.

[^rstudio-projects-note]: Их мы будем обсуждать в [разделе о работе с данными](r-data.qmd#r-data-rstudio-projects).




## Интерфейс R {#r-intro-rinterface}

:::{.lab-junior}
:::

![Логотип R. [Источник](https://www.r-project.org/logo/)](img/r-intro/r-logo.png){#fig-r-logo}

На самом деле, RStudio можно было и не ставить, так как R предоставляет собственный графический интерфейс для работы. Его можно открыть, кникнув на иконку R в списке программ вашего компа (@fig-r-logo). Однако как вы можете видеть, он довольно скудный (@fig-r-interface).

![Интерфейс R](img/r-intro/r-interface.png){#fig-r-interface}

Здесь есть всего два окна: справа --- консоль, слева --- скрипт. В скрипте пишется код, в консоли он выполняется. Иногда еще открываются окна с графиками. Стильно, можно, минималистично --- весьма по-программистски. Однако в RStudio работу можно обустроить гораздо удобнее и нагляднее, поэтому не будем останавливаться здесь долго и сразу же перейдем к изучению установленной IDE.



## Интерфейс RStudio {#r-intro-rstudiointerface}

:::{.lab-junior}
:::

![Логотип RStudio. [Источник](https://www.rstudio.com/about/logos/)](img/r-intro/rstudio-logo.png){#fig-rstudio-logo}

Чтобы открыть RStudio, надо найти её иконку (@fig-rstudio-logo) в списке программ на вашем компе. Открыв программу, вы увидите что-то такое (@fig-rstudio-interface).

![Интерфейс RStudio](img/r-intro/rstudio-interface.png){#fig-rstudio-interface}

:::{.callout-tip}
###### Нет первого окна

При самом первом открытии RStudio у вас может отображаться не четыре окна, как на скриншоте выше (@fig-rstudio-interface), а только три --- второе, третье и четвертое. Чтобы первое окно появилось, нажмите сочетание клавиш `Ctrl`+`Shift`+`N` (`Command`+`Shift`+`N` на Mac) или воспользуйте кнопкой в левом верхнем углу и выберите `R Script`.

![Создание нового скрипта](img/r-intro/new-rscript.png)
:::

:::{.callout-note collapse="true"}
###### У меня не тот цвет

Не беда. RStudio можно кастомизировать под себя, в том числе задать разные темы и стили оформления кода. Об этом будет [ниже](#r-intro-rstudiocustomize).
:::

Что же у нас есть в представленных окнах?

1. `Code Editor`
    - Это редактор кода. По сути это не более чем обычный блокнот, встроенный в IDE, с той лишь разницей, что некоторые слова подкрашиваются по определенным правилам. В этом окне мы будем писать *текст* скрипта.
    - В этом же окне будут открывать скриптовые файлы, которые были вами или кем-то ранее написаны. Скриптовые файлы языка R получают расширение `.R`, то есть какой-то скрипт будет называться `script.R`, однако это всё ещё обычный текстовый файл, который можно откыть в любом текстовом редакторе (типа Notebook или TextEdit).
    - Скрипт состоит из команд, которые мы хотим выполнить, но в самом скрипте они выполнить не могут, поэтому нам нужна консоль.
2. `Console`[^rterminal-bgjobs]
    - В консоли также можно писать команды и выполнять их прямо на месте --- получается максимальнго интерактивных режим работы. Однако после выполнения команды нигде не сохраняются[^rhistory].
    - Получается, что в работе над анализом данных удобно разнести задачи между консолью и редактором кода: в редакторе мы пишем команды, в консоли --- их выполняем.
3. В этом окне есть несколько вкладок. 
    - Главная --- это `Environment`. Это наше [глобальное] окружение. Здесь будут отображаться объекты, с которыми мы работаем --- переменные, датасеты, результаты моделирования и др.
    - На вкладке `History` хранится история выполнения команд, иногда она может пригодится, но собственно вкладкой пользуются, скорее, редко.
    - Другие вкладки отсюда мы использовать не будем.
4. Это очень полезное окно.
    - Во-первых, здесь есть вкладка `Files`, с помощью которой можно гулять по папкам и файлам. В первое время мы не будем активно обращать на неё внимание, однако когда перейдем к разговору о [работе с данными](r-data.qmd) и [проектах](r-data.qmd#r-data-rstudioprojects), она нам будет очень важна.
    - На вкладке `Plots` будут отображаться построенные графики.
    - Вкладка `Packages` помогает сориентироваться в установленных и подключенных пакетах[^rpackages].
    - В `Help` мы будем обращаться часто --- уже буквально через несколько мгновений изучим эту вкладку на практике. Здесь отображается документация. К ней стоит обращаться, если возникают какие-либо пролемы и непонятки с тем, как использовать ту или иную функцию.
    - `Viewer` и `Presentation` --- редко используемые вкладки, по крайнем мере, в первое время работы. Они необходимы, когда вы создаете какие-либо материалы в R (презентации, сайты, отчеты, книжки и др.)

[^rterminal-bgjobs]: Есть еще вкладки `Terminal` и `Background Jobs`. Пока что их проигнорируем, ибо и так других миллион. С этим двум обратимся, когда дойдем до соответствующих им тем.
[^rhistory]: Это не совсем правда, так как есть файл `.Rhistory`, о нем поговорим чуть дальше.
[^rpackages]: Хотя бы сделаем упор на работе с пакетами через скрипт --- это поможет повысить воспроизводимость кода.



### Кастомизация RStudio {#r-intro-rstudiocustomize}

:::{.lab-junior}
:::

После некоторого времени работы в RStudio, вы можете обнаружить, что предлагаемые по умолчанию конфигурация и оформление вам не очень удобны. Скажем, вы как истинный программист работаете по ночам, и дефолтная светлая тема оформления вам крайне больно бьет по глазам, и вы хотите расположить консоль рядом со скриптом, чтобы видеть результаты выполнения команд примерно на том же уровне, что и строки кода. Всё это выполнимо.

Здесь мы рассмотрим две, пожалуй, ключевых вещи, которые можно настроить --- [окна](#r-intro-panelayout) и [тему](#r-intro-appearance). В остальных возможностях, я уверен, вы сможете разобраться самостоятельно, понажимав всякие на кнопки или изучив [**RStudio User Guide**](https://docs.posit.co/ide/user/).


#### Тема {#r-intro-appearance}

:::{.lab-junior}
:::

Чтобы настроить тему RStudio, необходимо проследовать по пути `Tools` → `Global Options` → `Appearance`. Откроется следующее окно (@fig-rstudio-appearance). В нем можно выбрать шрифт, его размер, тему самого RStudio и тему редактора кода. Через кнопку `Add...` можно даже добавить собственные темы, если вам не нравится ни одна из предложенных.

![Настройки темы RStudio](img/r-intro/rstudio-appearance.png){#fig-rstudio-appearance}



#### Расположение окон и их содержимое {#r-intro-panelayout}

:::{.lab-junior}
:::

Чтобы настроить расположение и содержимое окон, необходимо проследовать по пути `Tools` → `Global Options` → `Pane Layout`. Откроется следующее окно (@fig-rstudio-panelayout). Логика проста: здесь тоже четыре области, соответствующих окнам интерфейса RStudio, и в каждом можно выбрать, что должно отображаться. Через `Add Column` можно добавить ещё одну колонку, если вы, скажем, работаете на большом мониторе в двух скриптах параллельно.

![Настройки расположения окон и их содержимого](img/r-intro/rstudio-panelayout.png){#fig-rstudio-panelayout}




## Работа в консоли {#r-intro-console}

:::{.lab-junior}
:::

> Красоту навели --- пора бы и серьезными вещами заняться.

Мы начнем работу с R в консоли, хотя такой вариант практически на практике не применяется. Тем не менее, во-первых, надо познакомиться с тем, как консоль работает, а во-вторых, избавиться от «страха консоли», если вдруг он у вас есть.

Когда вы открыли RStudio, R вывел вам в консоль приветственное сообщение примерно такого содержания:

```

R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.
```

В принципе, его можно проигнорировать --- в нем некая техническая информация. Всё это можно достать отдельно при необходимости. Сейчас сосредоточимся на том, что отображается после сообщения --- маленькая неприметная, но важнейшая стрелочка (@fig-console-waiting). Она обозначает, что R сейчас ничего не делает и ожидает новую команду.

![Ожидание команды](img/r-intro/console-waiting.gif){#fig-console-waiting}

Это дефолтное состояние консоли. Чтобы выполнить какую-либо команду, надо напечатать её в консоли и нажать `Enter`. Например, вы хотите напечатать в консоль `0`. Для этого есть команда (функция) `print()`. Введя в консоль `print(0)` и нажав `Enter`, мы получим следующий результат (@fig-console-print).

![Выполнение команды. После написания команды нажата клавиша `Enter`](img/r-intro/console-print.gif){#fig-console-print}

Однако состояние со стрелочкой не единственное. На месте стрелочки может стоять плюсик. Это значит, что R нашел окончание команды, и ожидает, когда вы её допишете, чтобы он мог отправить её выполняться. Например, вы всё ещё хотите напечатать в консоль `0`, но забыли закрыть скобку в функции `print()`. Это будет выглядеть так (@fig-console-plus). Если после «плюса» дописать скобку и нажать `Enter`, то команда выполнится.

![Ожидание окончания команды. После дописывания скобки нажата клавиша `Enter`](img/r-intro/console-plus.gif){#fig-console-plus}

Если вы не хотите, чтобы команды выполнялась, то её можно прервать, нажав клавишу `Esc` (@fig-console-plus-esc).

![Прерывание команды. После перехода в ожидание окончания команды нажата клавиша `Esc`](img/r-intro/console-plus-esc.gif){#fig-console-plus-esc}

Есть ещё одно состояние, когда не отображается ни стрелочка, ни плюс. Это значит, что вы дали R большую сложную команду, и он теперь занят --- вот прямо сейчас её выполняет. Надо подождать, и консоль вернется в дефолтное состояние.

Ура, мы разобрались, что происходит в консоли, теперь приступим собственно к R.



:::{.callout-note}
###### Далее: код

Отображать выполнение кода с помощью гифок, конечно, крайне неудобно. Далее будет использоваться следующий формат:

```{r}
print(0)
```

Покрашенное разными цветами --- это сам код. Ниже однотонное --- результат его выполнения, отображаемый в консоли.

:::



### Математические операции {#r-intro-math}

В R присутствуют все стандарные математические операции --- сложение (`+`), вычитание (`-`), умножение (`*`), деление (`/`) и возведение в степень (`^`). Выполняются весьма предсказуемо.

:::{#lst-math-opetaions}
```{r math-operations}
2 + 2
10 - 3
4 * 6
8 / 5
2 ^ 10
```

Базовые математические операции в R
:::

Есть также два специальных деления --- целочисленное (`%/%`) и взятие остатка от деления (`%%`).

:::{#lst-div-mod}
```{r div-mod}
5 %/% 2
5 %% 2
```

Целочисленное деление и взятие остатка от деления
:::

:::{#exr-basic-math}
Вычислите в R:

a. $32 + 64$
a. $-11 + 91$
a. $5 - 7$
a. $18 - 47$
a. $9 \cdot 12$
a. $616 : 55$
a. $8^{3}$
a. $-2^{-2}$
a. $(-2)^{-2}$
:::

:::{.solution}
```{r basic-math-solution}
32 + 64
-11 + 91
5 - 7
18 - 47
9 * 12
616 / 55
8 ^ 3
-2 ^ -2
(-2) ^ -2
```
:::

## Работа в скрипте {#r-intro-script}

:::{.lab-junior}
:::




## Цитирование R {#r-intro-citation}

:::{.lab-junior}
:::

На R [@r-core-team], как и на любые ресурсы, используемые при написании статьи или отчета, следует ссылаться --- цитировать в разделе References. Для этого существует удобная команда:

```{r r-citation}
citation()
```

В аутпуте есть вариант ссылки в форматах APA и BibTeх. Второй вам пригодится, если вы пишете отчеты в $\LaTeX$ или R Markdown и Quarto, первый --- в других случаях. Если вы копируете APA-цитату в текстовый редактор, добавьте курсивное форматирование на текст, заключенный между андерскорами (нижними подчеркиваниями[^underscore_term], `_`) , а сами андерскоры удалите[^underscore_md].

[^underscore_term]: Согласно правилам современного русского литературного языка, термин «нижнее подчеркивание» является плеоназмом, так как любое подчеркивание выполняется снизу. Однако такой термин используется наряду с терминами *подчерк* и *underscore*, поэтому использую его и я.

[^underscore_md]: Такой синтаксис используется в Markdown --- в частности, R Markdown.

Хорошим тоном будет сослаться и на RStudio [@rstudio-core-team]:


```{r rstudio-citation, echo=TRUE, eval=FALSE}
RStudio.Version()
```

```
$citation
To cite RStudio in publications use:

  Posit team (2024). RStudio: Integrated Development Environment for R. Posit Software,
  PBC, Boston, MA. URL http://www.posit.co/.

A BibTeX entry for LaTeX users is

  @Manual{,
    title = {RStudio: Integrated Development Environment for R},
    author = {{Posit team}},
    organization = {Posit Software, PBC},
    address = {Boston, MA},
    year = {2024},
    url = {http://www.posit.co/},
  }

$mode
[1] "desktop"

$version
[1] ‘2024.4.1.748’

$long_version
[1] "2024.04.1+748"

$release_name
[1] "Chocolate Cosmos"

```


## Обновления {#r-intro-updates}

:::{.lab-junior}
:::



## Работа в R из командной строки {#r-intro-cli}

:::{.lab-guru}
:::



***

###### Session Info {#session_info .unnumbered}

```{r session-info}
sessionInfo()
```

```{=html}
<script type="text/javascript" src="./js/chapter.js"></script>
```
